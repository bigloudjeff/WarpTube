@page "/youtube"
@using Google.Apis.YouTube.v3
@using Google.Apis.YouTube.v3.Data
@using Google.Apis.Services
@inject IJSRuntime JSRuntime

<PageTitle>YouTube</PageTitle>

<h1>YouTube Channel Browser</h1>

<p>Enter a YouTube channel handle to view their videos:</p>

<div class="mb-3">
    <label for="channelHandle" class="form-label">YouTube Handle:</label>
    <div class="input-group">
        <span class="input-group-text">@</span>
        <input type="text" class="form-control" id="channelHandle" @bind="channelHandle" placeholder="Enter channel handle (e.g., 'youtube')" />
        <button class="btn btn-primary" type="button" @onclick="LoadChannelVideos" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Loading...</span>
            }
            else
            {
                <span>Load Videos</span>
            }
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (channelInfo != null)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@channelInfo.Snippet.Title</h5>
            <p class="card-text">@channelInfo.Snippet.Description</p>
            <small class="text-muted">Subscribers: @channelInfo.Statistics?.SubscriberCount | Videos: @channelInfo.Statistics?.VideoCount</small>
        </div>
    </div>
}

@if (videos != null && videos.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Thumbnail</th>
                    <th>Title</th>
                    <th>Published</th>
                    <th>Views</th>
                    <th>Duration</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var video in videos)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(video.Snippet.Thumbnails?.Default__?.Url))
                            {
                                <img src="@video.Snippet.Thumbnails.Default__.Url" alt="Thumbnail" class="img-thumbnail" style="width: 80px; height: 60px;" />
                            }
                        </td>
                        <td>
                            <strong>@video.Snippet.Title</strong>
                            <br />
                            <small class="text-muted">@TruncateDescription(video.Snippet.Description, 100)</small>
                        </td>
                        <td>@video.Snippet.PublishedAt?.ToString("MMM dd, yyyy")</td>
                        <td>@(videoStatistics.ContainsKey(video.Id) ? FormatViewCount(videoStatistics[video.Id].ViewCount) : "N/A")</td>
                        <td>@(videoDetails.ContainsKey(video.Id) ? FormatDuration(videoDetails[video.Id].Duration) : "N/A")</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenVideo(video.Id)">
                                <i class="bi bi-play-fill"></i> Watch
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (videos.Count >= maxResults)
    {
        <div class="text-center mt-3">
            <button class="btn btn-secondary" @onclick="LoadMoreVideos" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                Load More Videos
            </button>
        </div>
    }
}
else if (!isLoading && !string.IsNullOrEmpty(channelHandle))
{
    <div class="alert alert-info" role="alert">
        No videos found for this channel.
    </div>
}

@code {
    private string channelHandle = "";
    private List<SearchResult> videos = new();
    private Channel? channelInfo;
    private Dictionary<string, VideoStatistics> videoStatistics = new();
    private Dictionary<string, ContentDetails> videoDetails = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private string nextPageToken = "";
    private readonly int maxResults = 10;

    private async Task LoadChannelVideos()
    {
        if (string.IsNullOrWhiteSpace(channelHandle))
        {
            errorMessage = "Please enter a channel handle.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        videos.Clear();
        videoStatistics.Clear();
        videoDetails.Clear();
        nextPageToken = "";

        try
        {
            // Note: This is a demo implementation
            // In a real application, you would need to provide a valid API key
            // and handle authentication properly
            
            // For now, we'll create sample data to demonstrate the UI
            await Task.Delay(1000); // Simulate API call delay
            
            LoadSampleData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading videos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMoreVideos()
    {
        if (string.IsNullOrEmpty(nextPageToken) || isLoading)
            return;

        isLoading = true;
        try
        {
            // Simulate loading more videos
            await Task.Delay(1000);
            // In a real implementation, you would use the nextPageToken to load more results
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading more videos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadSampleData()
    {
        // Create sample channel info
        channelInfo = new Channel
        {
            Snippet = new ChannelSnippet
            {
                Title = $"Sample Channel (@{channelHandle})",
                Description = "This is a sample channel description. In a real implementation, this would be fetched from the YouTube API."
            },
            Statistics = new ChannelStatistics
            {
                SubscriberCount = 1234567,
                VideoCount = 456
            }
        };

        // Create sample video data
        videos = new List<SearchResult>();
        for (int i = 1; i <= maxResults; i++)
        {
            var videoId = $"sample_video_{i}";
            var video = new SearchResult
            {
                Id = new ResourceId { VideoId = videoId },
                Snippet = new SearchResultSnippet
                {
                    Title = $"Sample Video {i} - Amazing Content",
                    Description = $"This is a sample video description for video {i}. It contains some interesting content about various topics.",
                    PublishedAt = DateTime.Now.AddDays(-i * 7),
                    Thumbnails = new ThumbnailDetails
                    {
                        Default__ = new Thumbnail
                        {
                            Url = $"https://via.placeholder.com/120x90/FF0000/FFFFFF?text=Video+{i}"
                        }
                    }
                }
            };
            videos.Add(video);

            // Add sample statistics
            videoStatistics[videoId] = new VideoStatistics
            {
                ViewCount = (ulong)(Random.Shared.Next(1000, 1000000))
            };

            // Add sample content details
            videoDetails[videoId] = new ContentDetails
            {
                Duration = $"PT{Random.Shared.Next(1, 20)}M{Random.Shared.Next(1, 60)}S"
            };
        }
    }

    private string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description))
            return "";

        return description.Length <= maxLength 
            ? description 
            : description.Substring(0, maxLength) + "...";
    }

    private string FormatViewCount(ulong? viewCount)
    {
        if (!viewCount.HasValue)
            return "N/A";

        var count = viewCount.Value;
        if (count >= 1000000)
            return $"{count / 1000000.0:F1}M";
        if (count >= 1000)
            return $"{count / 1000.0:F1}K";
        return count.ToString();
    }

    private string FormatDuration(string duration)
    {
        if (string.IsNullOrEmpty(duration))
            return "N/A";

        try
        {
            // Parse ISO 8601 duration format (PT#M#S)
            var timeSpan = System.Xml.XmlConvert.ToTimeSpan(duration);
            if (timeSpan.Hours > 0)
                return $"{timeSpan.Hours}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}";
            else
                return $"{timeSpan.Minutes}:{timeSpan.Seconds:D2}";
        }
        catch
        {
            return duration;
        }
    }

    private async Task OpenVideo(string videoId)
    {
        var url = $"https://www.youtube.com/watch?v={videoId}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}
